# docker-compose up -d

version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - mpjmp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "file-upload-topic:1:1,file-processed-topic:1:1,file-error-topic:1:1,file-replication-topic:1:1"
    depends_on:
      - zookeeper
    networks:
      - mpjmp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  file-upload-service:
    build: ../backend/file-upload-service
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    env_file: ../.env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - UPLOAD_DIR=/app/uploads
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./uploads:/app/uploads
    networks:
      - mpjmp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  processing-service:
    build: ../backend/processing-service
    ports:
      - "8082:8082"
    depends_on:
      - kafka
    env_file: ../.env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - mpjmp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  orchestrator-service:
    build: ../backend/orchestrator-service
    ports:
      - "8083:8083"
    depends_on:
      - kafka
    env_file: ../.env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - mpjmp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  notification-service:
    build: ../backend/notification-service
    ports:
      - "8084:8084"
    depends_on:
      - kafka
    env_file: ../.env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - mpjmp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  storage-service:
    build: ../backend/storage-service
    ports:
      - "8085:8085"
    depends_on:
      - kafka
    env_file: ../.env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - device.id=storage-node-1
    networks:
      - mpjmp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  mpjmp_network:
    driver: bridge
